{"version":3,"sources":["components/EmployeeTable.jsx","components/TableHead.jsx","containers/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","employees","this","props","data","id","employee_name","employee_salary","employee_age","React","Component","TableHead","method","sort","className","scope","key","onClick","Table","map","person","App","state","sortAscending","filteredEmployees","search","componentDidMount","axios","get","then","response","setState","sortEmployees","field","sortedEmployees","a","b","console","log","handleInputChange","e","target","name","value","handleSubmit","preventDefault","filterEmployees","searchTerm","toLowerCase","filter","employee","includes","onSubmit","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c572fe6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass EmployeeTable extends React.Component {\r\n    render() {\r\n\r\n    const employees = this.props.data;\r\n\r\n    return (\r\n            <tr>\r\n                <td>{employees.id}</td>\r\n                <td>{employees.employee_name}</td>\r\n                <td>{employees.employee_salary}</td>\r\n                <td>{employees.employee_age}</td>\r\n            </tr>\r\n    );\r\n    }\r\n}\r\n\r\nexport default EmployeeTable;","import React, { Component } from \"react\";\r\n\r\nclass TableHead extends React.Component {\r\n    render() {\r\n    const method = this.props.method;\r\n    const sort = this.props.sort;\r\n    return (\r\n        <thead className=\"thead-dark\">\r\n        <tr>\r\n            <th scope=\"col\">\r\n                <button className=\"btn btn-dark\" key=\"ID\">ID</button>\r\n            </th>\r\n            <th scope=\"col\" onClick={() => {method(\"employee_name\")}}>\r\n                <button className=\"btn btn-dark\" key=\"name\">Name</button>\r\n            </th>\r\n            <th scope=\"col\" onClick={() => {method(\"employee_salary\")}}>\r\n                <button className=\"btn btn-dark\" key=\"salary\">Salary</button>\r\n            </th>\r\n            <th scope=\"col\" onClick={() => {method(\"employee_age\")}}>\r\n                <button className=\"btn btn-dark\" key=\"age\">Age</button>\r\n            </th>\r\n        </tr>\r\n        </thead>\r\n    );\r\n    }\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\nimport EmployeeTable from \"../components/EmployeeTable\";\r\nimport TableHead from \"../components/TableHead\";\r\n\r\nclass Table extends React.Component {\r\n    render() {    \r\n    const employees = this.props.data;\r\n    const method = this.props.method;\r\n    const sort = this.props.sort;\r\n    return (\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <table className=\"table\">\r\n              <TableHead method={method} />\r\n              <tbody>\r\n              {employees.map(person => (\r\n                <EmployeeTable data={person} />\r\n              ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Table;","// IMPORTS ----------------------------------\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Table from \"./containers/Table\";\n// -----------------------------------------^\n\n// COMPONENT ---------------------------------------------------------------------------------\nclass App extends Component  {\n  state = {\n    sortAscending: true,\n    employees: [],\n    filteredEmployees: [],\n    search: \"\",\n  }\n  \n  componentDidMount = () => {\n    axios.get(\"https://cors-anywhere.herokuapp.com/http://dummy.restapiexample.com/api/v1/employees\").then((response) => {\n      this.setState({\n        employees: response.data.data,\n        filteredEmployees: response.data.data,\n      })\n    })\n  }\n\n  sortEmployees = (field) => {\n    function compare(a, b) {\n      console.log(\"beep\")\n      if (a[field] > b[field]) return 1;\n      if (b[field] > a[field]) return -1;\n      return 0;\n    }\n\n    const sortedEmployees = this.state.employees.sort(compare);\n    this.setState({\n      employees: sortedEmployees,\n    })\n  }\n\n  handleInputChange = (e) => {\n    const {name, value} = e.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.filterEmployees()\n  }\n\n  filterEmployees = () => {\n    const searchTerm = this.state.search.toLowerCase();\n    this.setState({\n      employees: this.state.employees.filter((employee) => \n        employee.employee_name.toLowerCase().includes(searchTerm)\n      ),\n      });\n    }\n\n\n  render() {\n    const employees = this.state.employees;\n    return (\n      <div className=\"container mt-5\">\n        <div className =\"row\">\n          <div className =\"col\">\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"form-group\">\n                <input className=\"form-control\" name=\"search\" value={this.state.search} placeholder=\"Search by employee Name\" onChange={this.handleInputChange} ></input>\n              </div>\n            </form>\n          </div>\n        </div>\n        <Table data={employees} method={this.sortEmployees} />\n      </div>\n    );\n  }\n}\n// ------------------------------------------------------------------------------------------^\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}